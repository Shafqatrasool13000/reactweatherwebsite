{"version":3,"sources":["WeatherApp/WeatherUI.js","WeatherApp/temp.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherUI","temp","pressure","humidity","speed","weathermood","city","country","sunset","useState","myWeatherMood","setMyWeatherMood","useEffect","date","Date","timestr","getHours","getMinutes","className","toLocaleString","Temp","userData","setuserData","tempInfo","setTempInfo","changeWeatherInfo","a","apiUrl","fetch","response","json","gotData","main","wind","weather","name","sys","alert","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onKeyPress","event","key","handKeyPress","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed771317.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\n\r\nconst WeatherUI = ({ temp,\r\n    pressure,\r\n    humidity,\r\n    speed,\r\n    weathermood,\r\n    city,\r\n    country,\r\n    sunset, }) => {\r\n  const [myWeatherMood, setMyWeatherMood] = useState(\"\")\r\n    //Dealing with weathermood\r\n    useEffect(() => {\r\n        if(weathermood)\r\n        switch (weathermood) {\r\n            case \"Clouds\":\r\n                setMyWeatherMood(\"wi-night-cloudy\")\r\n                break;\r\n                case 'Rain':\r\n                    setMyWeatherMood(\"wi-night-alt-sleet\")\r\n                    break;\r\n                    case 'Clear':\r\n                    setMyWeatherMood(\"wi-night-clear\")\r\n                    break;\r\n                    case 'Haze':\r\n                    setMyWeatherMood(\"wi-day-haze\")\r\n                    break;\r\n                    case 'Smoke':\r\n                        setMyWeatherMood(\"wi-smoke\")\r\n                        break;\r\n                        case 'Drizzle':\r\n                    setMyWeatherMood(\"wi-raindrops\")\r\n                    break;\r\n                    default:\r\n                        setMyWeatherMood(\"wi-night-cloudy\")\r\n                        break;\r\n                    }\r\n                \r\n                }, [weathermood])\r\n    \r\n  //Converting Second into Time\r\n    let sec = sunset;\r\n    //Convert to miliseconds\r\n    let date = new Date(sec * 1000);\r\n    let timestr = `${date.getHours()}:${date.getMinutes()}`\r\n\r\n    return (\r\n        <>\r\n            <article className='widget'>\r\n                <div className=\"weatherIcon\">\r\n                <i className={`wi ${myWeatherMood}`}></i>\r\n                <p>{`\"${weathermood}\"`}</p>\r\n                </div>\r\n                \r\n                <div className=\"weatherInfo\">\r\n                    <div className=\"temperature\">\r\n                        <span>{temp}&deg;</span>\r\n                    </div>\r\n                    <div className=\"description\">\r\n                        <div className=\"weatherCondition\">{weathermood}</div>\r\n                        <div className=\"place\">{`${city},${country}`}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"date\">{new Date().toLocaleString()}</div>\r\n                {/* 4 column section  */}\r\n                <div className=\"extra-temp\">\r\n                    <div className=\"temp-info-minmax\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p> <i className={\"wi wi-sunset\"}></i></p>\r\n\r\n                            <p className=\"extra-info-leftside\">\r\n                                {timestr} PM <br />\r\n                                SunSet\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n                            <p> <i className={\"wi wi-humidity\"}></i></p>\r\n\r\n                            <p className=\"extra-info-leftside\">\r\n                                {humidity} <br />\r\n                                humidity\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"weather-extra-info\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p> <i className={\"wi wi-rain\"}></i></p>\r\n\r\n                            <p className=\"extra-info-leftside\">\r\n                                {pressure} <br />\r\n                                pressure\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n                            <p> <i className={\"wi wi-strong-wind\"}></i></p>\r\n\r\n                            <p className=\"extra-info-leftside\">\r\n                                {speed} <br />\r\n                                Speed\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherUI\r\n","// https://api.openweathermap.org/data/2.5/weather?q=lahore&appid=71f417e6c80f8b57b0b5338c2017390b\r\nimport React, { useState, useEffect } from 'react'\r\nimport './style.css'\r\nimport WeatherUI from './WeatherUI'\r\n\r\nconst Temp = () => {\r\n\r\n    const [userData, setuserData] = useState(\"Okara\")\r\n    const [tempInfo, setTempInfo] = useState(\"\")\r\n    const changeWeatherInfo = async () => {\r\n       \r\n\r\n           try {\r\n               \r\n                const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${userData}&units=metric&appid=71f417e6c80f8b57b0b5338c2017390b`;\r\n                const response = await fetch(apiUrl);\r\n                const gotData = await response.json();\r\n                const { temp } = gotData.main;\r\n                // const {main:weathermood}=gotData.weather;\r\n                const { pressure } = gotData.main;\r\n                const { humidity } = gotData.main;\r\n                const { speed } = gotData.wind;\r\n                const { main: weathermood } = gotData.weather[0]\r\n                const { name: city } = gotData;\r\n                const { country } = gotData.sys;\r\n                const { sunset } = gotData.sys;\r\n                \r\n                const myAllWeatherData = {\r\n                    temp,\r\n                    pressure,\r\n                    humidity,\r\n                    speed,\r\n                    weathermood,\r\n                    city,\r\n                    country,\r\n                    sunset,\r\n                }\r\n                \r\n                setTempInfo(myAllWeatherData);\r\n            } catch (error) {\r\n                if(!userData){\r\n                    alert(`fill Search Field `)\r\n                }\r\n                console.log(error);\r\n            }\r\n            setuserData('');\r\n            \r\n            \r\n            \r\n        \r\n    }\r\n        useEffect(() => {\r\n            \r\n\r\n                changeWeatherInfo()\r\n            \r\n    }, [])// eslint-disable-line react-hooks/exhaustive-deps\r\n    const handKeyPress=(event)=>{\r\n       if(event.key==='Enter'){\r\n          \r\n        return changeWeatherInfo();\r\n       }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"wrap\">\r\n                {/* SearchInput fill data */}\r\n                <div className='search'>\r\n                    <input type=\"search\"\r\n                        placeholder=\"Search...\"\r\n                        autoFocus\r\n                        id='search'\r\n                        className=\"searchTerm\"\r\n                        value={userData}\r\n                        onChange={(e) => setuserData(e.target.value)}\r\n                        onKeyPress={(event)=>handKeyPress(event)}\r\n                    />\r\n                    {/* Search Button */}\r\n                    <button className=\"searchButton\" type='button ' onClick={() => { changeWeatherInfo() }}>Search </button>\r\n                </div>\r\n            </div>\r\n            <WeatherUI {...tempInfo} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Temp\r\n","import React from 'react'\n import Temp from './WeatherApp/temp'\nconst App = () => {\n  return <>\n    \n    <Temp />\n\n\n  </>\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}